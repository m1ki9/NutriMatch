// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using NutriMatch.Data;
#nullable disable
namespace NutriMatch.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250810011611_RecipeDeclineNoteAdded")]
    partial class RecipeDeclineNoteAdded
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);
            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");
                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");
                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");
                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");
                    b.HasKey("Id");
                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");
                    b.ToTable("AspNetRoles", (string)null);
                });
            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");
                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));
                    b.Property<string>("ClaimType")
                        .HasColumnType("text");
                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");
                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");
                    b.HasKey("Id");
                    b.HasIndex("RoleId");
                    b.ToTable("AspNetRoleClaims", (string)null);
                });
            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");
                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));
                    b.Property<string>("ClaimType")
                        .HasColumnType("text");
                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");
                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");
                    b.HasKey("Id");
                    b.HasIndex("UserId");
                    b.ToTable("AspNetUserClaims", (string)null);
                });
            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");
                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");
                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");
                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");
                    b.HasKey("LoginProvider", "ProviderKey");
                    b.HasIndex("UserId");
                    b.ToTable("AspNetUserLogins", (string)null);
                });
            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");
                    b.Property<string>("RoleId")
                        .HasColumnType("text");
                    b.HasKey("UserId", "RoleId");
                    b.HasIndex("RoleId");
                    b.ToTable("AspNetUserRoles", (string)null);
                });
            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");
                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");
                    b.Property<string>("Value")
                        .HasColumnType("text");
                    b.HasKey("UserId", "LoginProvider", "Name");
                    b.ToTable("AspNetUserTokens", (string)null);
                });
            modelBuilder.Entity("NutriMatch.Models.FavoriteRecipe", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");
                    b.Property<int>("RecipeId")
                        .HasColumnType("integer");
                    b.HasKey("UserId", "RecipeId");
                    b.HasIndex("RecipeId");
                    b.ToTable("FavoriteRecipes");
                });
            modelBuilder.Entity("NutriMatch.Models.Ingredient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");
                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));
                    b.Property<float>("Calories")
                        .HasColumnType("real");
                    b.Property<float>("Carbs")
                        .HasColumnType("real");
                    b.Property<float>("Fat")
                        .HasColumnType("real");
                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");
                    b.Property<float>("Protein")
                        .HasColumnType("real");
                    b.HasKey("Id");
                    b.ToTable("Ingredients");
                });
            modelBuilder.Entity("NutriMatch.Models.Recipe", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");
                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));
                    b.Property<string>("AdminComment")
                        .IsRequired()
                        .HasColumnType("text");
                    b.Property<float>("Calories")
                        .HasColumnType("real");
                    b.Property<float>("Carbs")
                        .HasColumnType("real");
                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");
                    b.Property<string>("DeclineReason")
                        .IsRequired()
                        .HasColumnType("text");
                    b.Property<float>("Fat")
                        .HasColumnType("real");
                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("text");
                    b.PrimitiveCollection<string[]>("Instructions")
                        .HasColumnType("text[]");
                    b.Property<float>("Protein")
                        .HasColumnType("real");
                    b.Property<string>("RecipeStatus")
                        .IsRequired()
                        .HasColumnType("text");
                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");
                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");
                    b.HasKey("Id");
                    b.HasIndex("UserId");
                    b.ToTable("Recipes");
                });
            modelBuilder.Entity("NutriMatch.Models.RecipeIngredient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");
                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));
                    b.Property<int>("IngredientId")
                        .HasColumnType("integer");
                    b.Property<float>("Quantity")
                        .HasColumnType("real");
                    b.Property<int>("RecipeId")
                        .HasColumnType("integer");
                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasColumnType("text");
                    b.HasKey("Id");
                    b.HasIndex("IngredientId");
                    b.HasIndex("RecipeId");
                    b.ToTable("RecipeIngredients");
                });
            modelBuilder.Entity("NutriMatch.Models.RecipeRating", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");
                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));
                    b.Property<double>("Rating")
                        .HasColumnType("double precision");
                    b.Property<int>("RecipeId")
                        .HasColumnType("integer");
                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");
                    b.HasKey("Id");
                    b.HasIndex("RecipeId");
                    b.HasIndex("UserId", "RecipeId")
                        .IsUnique();
                    b.ToTable("RecipeRatings");
                });
            modelBuilder.Entity("NutriMatch.Models.Restaurant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");
                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));
                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");
                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("text");
                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");
                    b.HasKey("Id");
                    b.ToTable("Restaurants");
                });
            modelBuilder.Entity("NutriMatch.Models.RestaurantMeal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");
                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));
                    b.Property<float>("Calories")
                        .HasColumnType("real");
                    b.Property<float>("Carbs")
                        .HasColumnType("real");
                    b.Property<float>("Fat")
                        .HasColumnType("real");
                    b.Property<string>("ItemDescription")
                        .IsRequired()
                        .HasColumnType("text");
                    b.Property<string>("ItemName")
                        .IsRequired()
                        .HasColumnType("text");
                    b.Property<float>("Protein")
                        .HasColumnType("real");
                    b.Property<int?>("RestaurantId")
                        .HasColumnType("integer");
                    b.Property<string>("RestaurantName")
                        .IsRequired()
                        .HasColumnType("text");
                    b.HasKey("Id");
                    b.HasIndex("RestaurantId");
                    b.ToTable("RestaurantMeals");
                });
            modelBuilder.Entity("NutriMatch.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");
                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");
                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");
                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");
                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");
                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");
                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");
                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");
                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");
                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");
                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");
                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");
                    b.Property<string>("ProfilePictureUrl")
                        .IsRequired()
                        .HasColumnType("text");
                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");
                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");
                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");
                    b.HasKey("Id");
                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");
                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");
                    b.ToTable("AspNetUsers", (string)null);
                });
            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("NutriMatch.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("NutriMatch.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                    b.HasOne("NutriMatch.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("NutriMatch.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
            modelBuilder.Entity("NutriMatch.Models.FavoriteRecipe", b =>
                {
                    b.HasOne("NutriMatch.Models.Recipe", "Recipe")
                        .WithMany("FavoritedBy")
                        .HasForeignKey("RecipeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                    b.HasOne("NutriMatch.Models.User", "User")
                        .WithMany("FavoriteRecipes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                    b.Navigation("Recipe");
                    b.Navigation("User");
                });
            modelBuilder.Entity("NutriMatch.Models.Recipe", b =>
                {
                    b.HasOne("NutriMatch.Models.User", "User")
                        .WithMany("Recipes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                    b.Navigation("User");
                });
            modelBuilder.Entity("NutriMatch.Models.RecipeIngredient", b =>
                {
                    b.HasOne("NutriMatch.Models.Ingredient", "Ingredient")
                        .WithMany()
                        .HasForeignKey("IngredientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                    b.HasOne("NutriMatch.Models.Recipe", null)
                        .WithMany("RecipeIngredients")
                        .HasForeignKey("RecipeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                    b.Navigation("Ingredient");
                });
            modelBuilder.Entity("NutriMatch.Models.RecipeRating", b =>
                {
                    b.HasOne("NutriMatch.Models.Recipe", "Recipe")
                        .WithMany("Ratings")
                        .HasForeignKey("RecipeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                    b.HasOne("NutriMatch.Models.User", "User")
                        .WithMany("Ratings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                    b.Navigation("Recipe");
                    b.Navigation("User");
                });
            modelBuilder.Entity("NutriMatch.Models.RestaurantMeal", b =>
                {
                    b.HasOne("NutriMatch.Models.Restaurant", "Restaurant")
                        .WithMany("RestaurantMeals")
                        .HasForeignKey("RestaurantId");
                    b.Navigation("Restaurant");
                });
            modelBuilder.Entity("NutriMatch.Models.Recipe", b =>
                {
                    b.Navigation("FavoritedBy");
                    b.Navigation("Ratings");
                    b.Navigation("RecipeIngredients");
                });
            modelBuilder.Entity("NutriMatch.Models.Restaurant", b =>
                {
                    b.Navigation("RestaurantMeals");
                });
            modelBuilder.Entity("NutriMatch.Models.User", b =>
                {
                    b.Navigation("FavoriteRecipes");
                    b.Navigation("Ratings");
                    b.Navigation("Recipes");
                });
#pragma warning restore 612, 618
        }
    }
}
