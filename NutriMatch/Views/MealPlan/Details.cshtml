@model NutriMatch.Models.WeeklyMealPlan
@{
    ViewBag.Title = "Weekly Meal Plan";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Create Meal Plan</title>
    <link href="~/css/MealPlanDetails.css" rel="stylesheet">
</head>
<body>
    <div class="container">
        <div class="header-section">
            <h1>Your Weekly Meal Plan</h1>
            <p>Perfectly balanced nutrition for every day of the week</p>
            <div class="generated-date">
                Generated on @Model.GeneratedAt.ToString("MMMM dd, yyyy 'at' h:mm tt")
            </div>
        </div>
        <div class="navigation-bar">
            <a href="@Url.Action("Index", "MealPlan")" class="nav-btn">
                <i class="fas fa-arrow-left"></i>
                Back to My Plans
            </a>
            <button class="nav-btn delete" onclick="showDeleteModal()">
                <i class="fas fa-trash-alt"></i>
                Delete Plan
            </button>
        </div>
        <div class="days-container">
            @{
                var days = new[] { "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday" };
                var dayMeals = Model.MealSlots.GroupBy(ms => ms.Day).ToDictionary(g => g.Key, g => g.ToList());
            }
            @foreach (var day in days)
            {
                var meals = dayMeals.ContainsKey(day) ? dayMeals[day] : new List<NutriMatch.Models.MealSlot>();
                var dailyCalories = meals.Sum(m => m.IsRestaurantMeal ? (m.RestaurantMeal?.Calories ?? 0) :
                (m.Recipe?.Calories
                ?? 0));
                <div class="day-card">
                    <div class="day-header">
                        <div class="day-name">@day</div>
                        <div class="day-calories">@((int)dailyCalories) cal</div>
                    </div>
                    @if (meals.Any())
                    {
                        <div class="meals-container">
                            @foreach (var meal in meals.OrderBy(m => GetMealOrder(m.MealType)))
                            {
                                @if (meal.IsRestaurantMeal && meal.RestaurantMeal != null)
                                {
                                    <div class="meal-card @meal.MealType">
                                        <div class="meal-header">
                                            <span class="meal-type @meal.MealType">@meal.MealType</span>
                                            <span class="restaurant-badge">Restaurant</span>
                                        </div>
                                        <div class="meal-name">@meal.RestaurantMeal.ItemName</div>
                                        <div class="meal-restaurant">@meal.RestaurantMeal.RestaurantName</div>
                                        <div class="meal-macros">
                                            <span class="macro-badge">@((int)meal.RestaurantMeal.Calories) cal</span>
                                            <span class="macro-badge">@((int)meal.RestaurantMeal.Protein)g protein</span>
                                            <span class="macro-badge">@((int)meal.RestaurantMeal.Carbs)g carbs</span>
                                            <span class="macro-badge">@((int)meal.RestaurantMeal.Fat)g fat</span>
                                        </div>
                                    </div>
                                }
                                else if (meal.Recipe != null)
                                {
                                    <div class="meal-card @meal.MealType clickable"
                                        onclick="handleMealCardClick(event, @meal.Recipe.Id)">
                                        <div class="meal-header">
                                            <span class="meal-type @meal.MealType">@meal.MealType</span>
                                            <span class="recipe-badge">Recipe</span>
                                        </div>
                                        <div class="meal-name">@meal.Recipe.Title</div>
                                        <div class="meal-macros">
                                            <span class="macro-badge">@((int)meal.Recipe.Calories) cal</span>
                                            <span class="macro-badge">@((int)meal.Recipe.Protein)g protein</span>
                                            <span class="macro-badge">@((int)meal.Recipe.Carbs)g carbs</span>
                                            <span class="macro-badge">@((int)meal.Recipe.Fat)g fat</span>
                                        </div>
                                    </div>
                                }
                            }
                        </div>
                    }
                    else
                    {
                        <div class="empty-day">No meals planned for this day</div>
                    }
                </div>
            }
        </div>
        <div class="summary-card">
            <div class="summary-header">
                <h2>Weekly Overview</h2>
                <p>Your nutritional breakdown for the entire week</p>
            </div>
            @{
                var totalCalories = Model.MealSlots.Sum(ms => ms.IsRestaurantMeal ? (ms.RestaurantMeal?.Calories ?? 0) :
                (ms.Recipe?.Calories ?? 0));
                var totalProtein = Model.MealSlots.Sum(ms => ms.IsRestaurantMeal ? (ms.RestaurantMeal?.Protein ?? 0) :
                (ms.Recipe?.Protein ?? 0));
                var totalCarbs = Model.MealSlots.Sum(ms => ms.IsRestaurantMeal ? (ms.RestaurantMeal?.Carbs ?? 0) :
                (ms.Recipe?.Carbs ?? 0));
                var totalFat = Model.MealSlots.Sum(ms => ms.IsRestaurantMeal ? (ms.RestaurantMeal?.Fat ?? 0) :
                (ms.Recipe?.Fat
                ?? 0));
                var restaurantMeals = Model.MealSlots.Count(ms => ms.IsRestaurantMeal);
            }
            <div class="summary-grid">
                <div class="summary-item">
                    <div class="summary-label">Total Calories</div>
                    <div class="summary-value">@((int)totalCalories)</div>
                </div>
                <div class="summary-item">
                    <div class="summary-label">Total Protein</div>
                    <div class="summary-value">@((int)totalProtein)g</div>
                </div>
                <div class="summary-item">
                    <div class="summary-label">Total Carbs</div>
                    <div class="summary-value">@((int)totalCarbs)g</div>
                </div>
                <div class="summary-item">
                    <div class="summary-label">Total Fat</div>
                    <div class="summary-value">@((int)totalFat)g</div>
                </div>
                <div class="summary-item">
                    <div class="summary-label">Restaurant Meals</div>
                    <div class="summary-value">@restaurantMeals</div>
                </div>
                <div class="summary-item">
                    <div class="summary-label">Home Cooked</div>
                    <div class="summary-value">@(Model.MealSlots.Count - restaurantMeals)</div>
                </div>
            </div>
        </div>
    </div>
    <div id="modalWindow"></div>
    <div id="deleteModal" class="modal">
        <div class="delete-modal-content modal-content">
            <div class="modal-header">
                <i class="fas fa-exclamation-triangle"></i>
                Delete Meal Plan
            </div>
            <div class="modal-body">
                Are you sure you want to delete this meal plan? This action cannot be undone and all meal data will be
                permanently removed.
            </div>
            <div class="modal-buttons">
                <button class="modal-btn cancel" onclick="hideDeleteModal()">Cancel</button>
                <button class="modal-btn confirm" onclick="confirmDelete()">Delete Plan</button>
            </div>
        </div>
    </div>
    <form id="deleteForm" method="post" action="@Url.Action("Delete", "MealPlan")" style="display: none;">
        @Html.AntiForgeryToken()
        <input type="hidden" name="id" value="@Model.Id" />
    </form>
</body>
<script>
    function showRecipeDetailsFromMealPlan(recipeId) {
        const clickedCard = event.currentTarget;
        clickedCard.classList.add('loading');
        fetch(`/Recipes/Details/${recipeId}`)
            .then(response => {
                if (!response.ok) {
                    throw new Error('Network response was not ok');
                }
                return response.text();
            })
            .then(html => {
                const modalContainer = document.getElementById('modalWindow');
                modalContainer.innerHTML = html;
                const scripts = modalContainer.querySelectorAll("script");
                scripts.forEach(script => {
                    const newScript = document.createElement("script");
                    if (script.src) {
                        newScript.src = script.src;
                    } else {
                        newScript.textContent = script.textContent;
                    }
                    document.body.appendChild(newScript);
                    document.body.removeChild(newScript);
                });
                const modalElement = modalContainer.querySelector('.modal');
                if (modalElement) {
                    const modal = new bootstrap.Modal(modalElement);
                    modal.show();
                    modalElement.addEventListener('hidden.bs.modal', function () {
                        modalContainer.innerHTML = '';
                        clickedCard.classList.remove('loading');
                    });
                    modalElement.addEventListener('shown.bs.modal', function () {
                        clickedCard.classList.remove('loading');
                    });
                } else {
                    clickedCard.classList.remove('loading');
                }
            })
            .catch(err => {
                console.error("Failed to fetch recipe details", err);
                alert("Failed to load recipe details. Please try again.");
                clickedCard.classList.remove('loading');
            });
    }
    function handleMealCardClick(event, recipeId) {
        if (recipeId && recipeId > 0) {
            showRecipeDetailsFromMealPlan(recipeId);
        }
    }
    function showDeleteModal() {
        document.getElementById('deleteModal').style.display = 'block';
        document.body.style.overflow = 'hidden';
    }
    function hideDeleteModal() {
        document.getElementById('deleteModal').style.display = 'none';
        document.body.style.overflow = 'auto';
    }
    function confirmDelete() {
        document.getElementById('deleteForm').submit();
    }
    window.onclick = function (event) {
        const modal = document.getElementById('deleteModal');
        if (event.target === modal) {
            hideDeleteModal();
        }
    }
    document.addEventListener('keydown', function (event) {
        if (event.key === 'Escape') {
            hideDeleteModal();
        }
    });
    document.addEventListener('DOMContentLoaded', function () {
        const cards = document.querySelectorAll('.day-card');
        cards.forEach((card, index) => {
            card.style.animationDelay = `${index * 0.1}s`;
        });
    });
</script>
@functions {
    private int GetMealOrder(string mealType)
    {
        return mealType?.ToLower() switch
        {
            "breakfast" => 1,
            "lunch" => 2,
            "dinner" => 3,
            "snack" => 4,
            _ => 5
        };
    }
}