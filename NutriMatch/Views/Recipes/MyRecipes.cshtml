@model List<Recipe>
@{
    ViewData["Title"] = "My Recipes";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<style>
    :root {
    --primary-green: #2ECC71;
    --dark-green: #27AE60;
    --light-green: #58D68D;
    --light-green-gray: #bbcabe;
    --dark-gray: #2C3E50;
    --light-gray: #ECF0F1;
    --nutri-light-gray: #f3f4f6;
    --nutri-green-dark: #22c55e;
}
    body {
         font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        background: linear-gradient(135deg, var(--light-pink) 0%, white 50%, var(--light-green-gray) 100%);
        margin: 0;
        padding: 0;
        min-height: 100vh;
    }
    .container {
        margin: 0 auto;
        padding: 40px 20px;
    }
    .header-section {
        background: rgba(255, 255, 255, 0.9);
        border-radius: 20px;
        padding: 40px;
        margin-bottom: 30px;
        box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
        backdrop-filter: blur(10px);
        text-align: center;
    }
    .header-section h1 {
        color: #2c3e50;
        font-size: 2.5rem;
        font-weight: 600;
        margin: 0 0 15px 0;
    }
    .header-section p {
        color: #7f8c8d;
        font-size: 1.1rem;
        margin: 0 0 30px 0;
        line-height: 1.6;
    }
    .create-recipe-btn {
        background: #52c96b;
        color: white;
        padding: 15px 30px;
        border: none;
        border-radius: 25px;
        font-size: 1.1rem;
        font-weight: 600;
        text-decoration: none;
        display: inline-block;
        transition: all 0.3s ease;
        box-shadow: 0 5px 15px rgba(82, 201, 107, 0.3);
    }
    .create-recipe-btn:hover {
        background: #47b35f;
        transform: translateY(-2px);
        box-shadow: 0 8px 25px rgba(82, 201, 107, 0.4);
        color: white;
        text-decoration: none;
    }
    .stats-section {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
        gap: 20px;
        margin-bottom: 30px;
    }
    .stat-card {
        background: rgba(255, 255, 255, 0.8);
        border-radius: 15px;
        padding: 25px;
        text-align: center;
        box-shadow: 0 5px 20px rgba(0, 0, 0, 0.08);
        backdrop-filter: blur(5px);
    }
    .stat-number {
        font-size: 2rem;
        font-weight: 700;
        color: #52c96b;
        margin-bottom: 5px;
    }
    .stat-label {
        color: #7f8c8d;
        font-size: 0.9rem;
        text-transform: uppercase;
        letter-spacing: 1px;
    }
   .recipe-grid {
    display: grid;
    gap: 1.5rem;
    margin-top: 2rem;
    justify-items: center;
    grid-template-columns: 1fr; 
}
@@media (min-width: 768px) {
    .recipe-grid {
        grid-template-columns: repeat(2, 1fr); 
    }
}
@@media (min-width: 992px) {
    .recipe-grid {
        grid-template-columns: repeat(3, 1fr); 
    }
}
.recipe-card {
    width: 100%;
    max-width: 417.953px;
    height: 380px;
    background: white;
    border-radius: 20px;
    overflow: hidden;
    box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
    transition: transform 0.3s ease, box-shadow 0.3s ease;
    position: relative !important;
    cursor: pointer;
    flex-shrink: 0;
    box-sizing: border-box;
}
.recipe-card:hover {
    transform: translateY(-8px);
    box-shadow: 0 20px 40px rgba(0,0,0,0.15);
}
.recipe-card.loading {
    pointer-events: none;
}
.recipe-card.loading * {
    transition: none !important;
    animation: none !important;
}
.recipe-image {
    width: 100% !important;
    height: 200px !important;
    object-fit: cover;
    background: linear-gradient(45deg, var(--nutri-green), var(--nutri-green-dark));
    position: relative;
    display: block !important;
    flex-shrink: 0;
    box-sizing: border-box;
}
.favorite-btn {
    position: absolute;
    top: 12px;
    right: 12px;
    background: rgba(255, 255, 255, 0.9);
    border: none;
    border-radius: 50%;
    width: 40px;
    height: 40px;
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    transition: all 0.3s ease;
    z-index: 10;
    backdrop-filter: blur(10px);
}
.favorite-btn:hover {
    background: rgba(255, 255, 255, 1);
    transform: scale(1.1);
}
.favorite-btn i {
    font-size: 18px;
    color: #ef4444;
    transition: all 0.3s ease;
}
.favorite-btn:hover i {
    color: #dc2626;
}
.favorite-btn.active i {
    color: #ef4444;
    font-weight: 900;
}
.badge {
    position: absolute;
    top: 5px;
    right: 7px;
    padding: 6px 12px;
    font-size: 0.8rem;
    font-weight: 600;
    z-index: 15;
}
.recipe-content {
    padding: 1.5rem !important;
    height: calc(100% - 200px) !important;
    display: flex !important;
    flex-direction: column !important;
    box-sizing: border-box;
    position: relative;
    flex-shrink: 0;
}
.recipe-title {
    font-size: 1.3rem !important;
    font-weight: 700 !important;
    color: #1f2937 !important;
    margin-bottom: 0.5rem !important;
    line-height: 1.3 !important;
    transition: none !important;
    animation: none !important;
}
.recipe-card .recipe-title,
.recipe-card:hover .recipe-title,
.recipe-card:active .recipe-title,
.recipe-card:focus .recipe-title,
.recipe-card.loading .recipe-title {
    font-size: 1.3rem !important;
    font-weight: 700 !important;
    color: #1f2937 !important;
    margin-bottom: 0.5rem !important;
    line-height: 1.3 !important;
    transition: none !important;
    animation: none !important;
}
.recipe-meta {
    display: flex;
    align-items: center;
    gap: 1rem;
    margin-bottom: 1rem;
    font-size: 0.9rem;
    color: var(--nutri-gray);
    flex-wrap: wrap;
}
.recipe-meta .rating {
    color: #fbbf24;
    font-weight: 600;
}
.recipe-meta i {
    margin-right: 4px;
}
.recipe-macros {
    display: grid;
    grid-template-columns: repeat(4, 1fr);
    gap: 0.5rem;
    margin-top: 1px;
    padding-top: 0.7rem;
    border-top: 1px solid #eee;
}
.macro-item {
    text-align: center;
    padding: 0.5rem;
    background: var(--nutri-light-gray);
    border-radius: 10px;
}
.macro-value {
    font-weight: 700;
    color: var(--nutri-green-dark);
    font-size: 1rem;
    line-height: 1.2;
}
.macro-label {
    font-size: 0.8rem;
    color: var(--nutri-gray);
    text-transform: uppercase;
    font-weight: 600;
    line-height: 1;
}
    .empty-state {
        text-align: center;
        padding: 60px 20px;
        background: rgba(255, 255, 255, 0.8);
        border-radius: 20px;
        backdrop-filter: blur(10px);
    }
    .empty-icon {
        font-size: 4rem;
        color: #bdc3c7;
        margin-bottom: 20px;
    }
    .empty-title {
        font-size: 1.5rem;
        color: #7f8c8d;
        margin-bottom: 10px;
    }
    .empty-text {
        color: #95a5a6;
        margin-bottom: 30px;
    }
    .nutrition-tags {
        display: flex;
        flex-wrap: wrap;
        gap: 8px;
        margin-top: 15px;
    }
    .nutrition-tag {
        background: rgba(82, 201, 107, 0.1);
        color: #52c96b;
        padding: 4px 12px;
        border-radius: 12px;
        font-size: 0.8rem;
        font-weight: 500;
    }
    #modalWindow {
    position: fixed;
    top: 0;
    left: 0;
    z-index: 9999;
    pointer-events: none;
}
#modalWindow .modal {
    pointer-events: all;
}
.recipe-card h3.recipe-title {
    font-size: 1.3rem !important;
    font-weight: 700 !important;
    color: #1f2937 !important;
    margin-bottom: 0.5rem !important;
    line-height: 1.3 !important;
}
</style>
<body>
<div class="container mt-5">
    <div class="header-section">
        <h1>My Recipes</h1>
        <p>Manage and showcase your culinary creations. Share your favorite dishes with the NutriMatch community.</p>
        <a href="/Recipes/Create" class="create-recipe-btn">+ Create New Recipe</a>
    </div>
    <div class="stats-section">
        <div class="stat-card">
            <div class="stat-number">@Model.Count</div>
            <div class="stat-label">Total Recipes</div>
        </div>
        <div class="stat-card">
            <div class="stat-number">@ViewBag.AverageRating</div>
            <div class="stat-label">Avg Rating</div>
        </div>
    </div>
    @if (Model != null && Model.Any())
    {
        <div class="recipe-grid" id="recipeGrid">
            @foreach (var recipe in Model)
            {
                <div class="recipe-card" onclick="showRecipeDetails(@recipe.Id,true,'@recipe.RecipeStatus')" data-calories="@recipe.Calories" data-protein="@recipe.Protein" data-carbs="@recipe.Carbs" data-fat="@recipe.Fat">
                    <img src="@recipe.ImageUrl" alt="@recipe.Title" class="recipe-image">
                    <div class="badge">
                        @if(recipe.RecipeStatus == "Pending")
                        {
                            <span class="badge bg-warning">
                                <i class="fas fa-clock me-1"></i>Pending
                            </span>
                        }
                        else if (recipe.RecipeStatus == "Accepted")
                        {
                            <span class="badge bg-success">
                                <i class="fas fa-check me-1"></i>Accepted
                            </span>
                        }
                        else if (recipe.RecipeStatus == "Declined")
                        {
                            <span class="badge bg-danger">
                                <i class="fas fa-times me-1"></i>Declined
                            </span>
                        }
                    </div>
                    <div class="recipe-content">
                        <h3 class="recipe-title">@recipe.Title</h3>
                        <div class="recipe-meta">
                            <span class="rating">
                                <i class="fas fa-star"></i> @recipe.Rating
                            </span>
                            <span>
                                <i class="fas fa-user"></i>
                                @(recipe.User.UserName.Length > 23 
                                    ? recipe.User.UserName.Substring(0, 23) + "…" 
                                    : recipe.User.UserName)
                            </span>
                        </div>
                        <div class="recipe-macros">
                            <div class="macro-item">
                                <div class="macro-value">@recipe.Calories</div>
                                <div class="macro-label">Cal</div>
                            </div>
                            <div class="macro-item">
                                <div class="macro-value">@recipe.Protein</div>
                                <div class="macro-label">Protein</div>
                            </div>
                            <div class="macro-item">
                                <div class="macro-value">@recipe.Carbs</div>
                                <div class="macro-label">Carbs</div>
                            </div>
                            <div class="macro-item">
                                <div class="macro-value">@recipe.Fat</div>
                                <div class="macro-label">Fats</div>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>
    }
    else
    {
        <div class="empty-state">
            <div class="empty-icon">👨‍🍳</div>
            <h3 class="empty-title">No Recipes Yet</h3>
            <p class="empty-text">Start creating your first recipe and share your culinary masterpieces with the community!</p>
            <a href="/Recipes/Create" class="create-recipe-btn">Create Your First Recipe</a>
        </div>
    }
</div>
    <div id="modalWindow"></div>
    <div id="modalWindowDelete"></div>
<script>
    function showRecipeDetails(recipeId,isOwner,recipeStatus) {
    const clickedCard = event.currentTarget;
    clickedCard.classList.add('loading');
    const params = new URLSearchParams({
    isOwner: isOwner,
    recipeDetailsDisplayContorol: recipeStatus
});
    fetch(`/Recipes/Details/${recipeId}?${params}`)
        .then(response => {
            if (!response.ok) {
                throw new Error('Network response was not ok');
            }
            return response.text();
        })
        .then(html => {
            const modalContainer = document.getElementById('modalWindow');
            modalContainer.innerHTML = html;
            const scripts = modalContainer.querySelectorAll("script");
                scripts.forEach(script => {
                    const newScript = document.createElement("script");
                    if (script.src) {
                        newScript.src = script.src;
                    } else {
                        newScript.textContent = script.textContent;
                    }
                    document.body.appendChild(newScript);
                    document.body.removeChild(newScript);
                });
            const modalElement = modalContainer.querySelector('.modal');
            if (modalElement) {
                const modal = new bootstrap.Modal(modalElement);
                modal.show();
                modalElement.addEventListener('hidden.bs.modal', function () {
                    modalContainer.innerHTML = '';
                    clickedCard.classList.remove('loading');
                }); 
                modalElement.addEventListener('shown.bs.modal', function () {
                    clickedCard.classList.remove('loading');
                });
            } else {    
                clickedCard.classList.remove('loading');
            }
        })
        .catch(err => {
            console.error("Failed to fetch recipe details", err);
            alert("Failed to load recipe details. Please try again.");
            clickedCard.classList.remove('loading');
        });
}
function openDeleteModal(recipeId) {
    const deleteButton = event.target.closest('button');
    deleteButton.classList.add('loading');
    const recipeModalContainer = document.getElementById('modalWindow');
    const recipeModalElement = recipeModalContainer.querySelector('.modal');
    const savedRecipeHtml = recipeModalContainer.innerHTML;
    let recipeModalWasOpen = false;
    if (recipeModalElement && recipeModalElement.classList.contains('show')) {
        const recipeModalInstance = bootstrap.Modal.getInstance(recipeModalElement);
        if (recipeModalInstance) {
            recipeModalInstance.hide();
            recipeModalWasOpen = true;
        }
    }
    fetch(`/Recipes/Delete/${recipeId}`)
        .then(response => response.text())
        .then(html => {
            const deleteModalContainer = document.getElementById('modalWindowDelete');
            deleteModalContainer.innerHTML = html;
            const deleteModalElement = deleteModalContainer.querySelector('.modal');
            if (deleteModalElement) {
                const deleteModal = new bootstrap.Modal(deleteModalElement);
                deleteModal.show();
                deleteModalElement.addEventListener('hidden.bs.modal', function () {
                    deleteButton.classList.remove('loading');
                    deleteModalContainer.innerHTML = '';
                    if (recipeModalWasOpen && savedRecipeHtml.trim() !== '') {
                        recipeModalContainer.innerHTML = savedRecipeHtml;
                        const restoredModal = recipeModalContainer.querySelector('.modal');
                        if (restoredModal) {
                            const restoredInstance = new bootstrap.Modal(restoredModal);
                            restoredInstance.show();
                        }
                    }
                });
                deleteModalElement.addEventListener('shown.bs.modal', function () {
                    deleteButton.classList.remove('loading');
                });
            } else {
                deleteButton.classList.remove('loading');
            }
        })
        .catch(error => {
            console.error('Error loading delete modal:', error);
            deleteButton.classList.remove('loading');
            location.href = `/Recipes/Delete/${recipeId}`;
        });
}
</script>
</body>