@model NutriMatch.Models.Recipe
<link href="~/css/_RecipeDeclinePartial.css" rel="stylesheet" />
@{
    bool canResubmit = ViewBag.CanResubmit ?? false;
    DateTime? lastEditDate = ViewBag.LastEditDate;
    DateTime? declineDate = ViewBag.DeclineDate;
}
<div class="modal fade" id="recipeDeclineModal" tabindex="-1" aria-labelledby="recipeDeclineModalLabel"
    aria-hidden="true">
    @Html.AntiForgeryToken()
    <div class="modal-dialog modal-xl">
        <div class="modal-content">
            <div class="modal-header border-0">
                <h5 class="modal-title text-danger" id="recipeDeclineModalLabel">
                    <i class="fas fa-exclamation-triangle"></i>
                    Recipe Declined
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div class="recipe-hero">
                    <div class="recipe-image-container">
                        <img src="@Model.ImageUrl" alt="@Model.Title" class="recipe-image-details">
                        <div class="decline-overlay">
                            <div class="decline-badge">
                                <i class="fas fa-times-circle"></i>
                                DECLINED
                            </div>
                        </div>
                    </div>
                    <div class="recipe-info">
                        <div>
                            <div class="chef-badge">
                                <img src="@Model.User.ProfilePictureUrl" class="chef-avatar">
                                @Model.User.UserName
                            </div>
                            <h2 class="recipe-title-details">@Model.Title</h2>
                            <div class="decline-status">
                                <div class="status-item">
                                    <i class="fas fa-calendar-times text-danger"></i>
                                    <span>Declined on: @Model.DeclineReason </span>
                                </div>
                                @if (lastEditDate.HasValue)
                                {
                                    <div class="status-item">
                                        <i class="fas fa-edit text-info"></i>
                                        <span>Last edited: @lastEditDate.Value.ToString("MMM dd, yyyy HH:mm")</span>
                                    </div>
                                }
                            </div>
                        </div>
                        <div class="recipe-actions">
                            <div class="d-flex gap-3 align-items-center">
                                <button onclick="location.href='/Recipes/Edit/@Model.Id?requiresChange=true'"
                                    class="action-btn edit-btn" title="Edit Recipe">
                                    <i class="fas fa-edit"></i>
                                    <span>Edit and Resubmit Recipe</span>
                                </button>
                            </div>
                            @if (!canResubmit)
                            {
                                <div class="resubmit-hint">
                                    <i class="fas fa-info-circle"></i>
                                    Please edit your recipe to address the feedback before resubmitting
                                </div>
                            }
                        </div>
                    </div>
                </div>
                <div class="feedback-section">
                    <div class="feedback-card">
                        <div class="feedback-header">
                            <h4>
                                <i class="fas fa-comment-alt"></i>
                                Moderator Feedback
                            </h4>
                        </div>
                        <div class="feedback-content">
                            @if (!string.IsNullOrWhiteSpace(Model.AdminComment))
                            {
                                <div class="admin-comment">
                                    @Html.Raw(Model.AdminComment.Replace("\n", "<br/>"))
                                </div>
                            }
                            else
                            {
                                <div class="no-comment">
                                    <i class="fas fa-info-circle"></i>
                                    No specific feedback was provided. Please review your recipe for compliance with our
                                    guidelines.
                                </div>
                            }
                        </div>
                    </div>
                </div>
                <div class="row mt-4">
                    <div class="col-md-4">
                        <div class="nutrition-card">
                            <h4 class="section-title">
                                <i class="fas fa-chart-pie"></i>
                                Nutrition Facts
                            </h4>
                            <div class="nutrition-grid">
                                <div class="nutrition-item">
                                    <div class="nutrition-icon">
                                        <i class="fas fa-fire me-1" style="color: #ef4444;"></i>
                                    </div>
                                    <div class="nutrition-value">@Model.Calories</div>
                                    <div class="nutrition-label">Calories</div>
                                </div>
                                <div class="nutrition-item">
                                    <div class="nutrition-icon">
                                        <i class="fas fa-drumstick-bite me-1" style="color: #8b5cf6;"></i>
                                    </div>
                                    <div class="nutrition-value">@Model.Protein</div>
                                    <div class="nutrition-label">Protein</div>
                                </div>
                                <div class="nutrition-item">
                                    <div class="nutrition-icon">
                                        <i class="fas fa-bread-slice me-1" style="color: #f59e0b;"></i>
                                    </div>
                                    <div class="nutrition-value">@Model.Carbs</div>
                                    <div class="nutrition-label">Carbs</div>
                                </div>
                                <div class="nutrition-item">
                                    <div class="nutrition-icon">
                                        <i class="fas fa-tint me-1" style="color: #e5eb4dfa;"></i>
                                    </div>
                                    <div class="nutrition-value">@Model.Fat</div>
                                    <div class="nutrition-label">Fat</div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-8">
                        <div class="ingredients-list">
                            <h4 class="section-title">
                                <i class="fas fa-list-ul"></i>
                                Ingredients
                            </h4>
                            @if (Model.RecipeIngredients != null && Model.RecipeIngredients.Any())
                            {
                                @for (int i = 0; i < Model.RecipeIngredients.Count; i++)
                                {
                                    <div class="ingredient-item">
                                        <span class="ingredient-bullet">â€¢</span>
                                        <span>@Model.RecipeIngredients[i].Ingredient.Name, @Model.RecipeIngredients[i].Quantity
                                            @Model.RecipeIngredients[i].Unit</span>
                                    </div>
                                }
                            }
                        </div>
                        <div class="instructions-list">
                            <h4 class="section-title">
                                <i class="fas fa-clipboard-list"></i>
                                Instructions
                            </h4>
                            @{
                                var instructions =
                                System.Text.Json.JsonSerializer.Deserialize<List<string>>(Model.Instructions[0]);
                            }
                            @for (var i = 0; i < instructions.Count; i++)
                            {
                                <div class="instruction-item">
                                    <span class="instruction-number">@(i + 1)</span>
                                    <span class="instruction-text">@instructions[i]</span>
                                </div>
                            }
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
<script>
    document.getElementById('recipeDeclineModal').addEventListener('shown.bs.modal', function () {
        this.querySelector('.modal-body').scrollTop = 0;
    });
    let isResubmitInProgress = false;
    function resubmitRecipe(recipeId) {
        if (isResubmitInProgress) return;
        const resubmitBtn = document.querySelector('.resubmit-btn');
        if (resubmitBtn.classList.contains('disabled')) {
            showDeclineToast('Please edit your recipe first before resubmitting', 'error');
            return;
        }
        if (!confirm('Are you sure you want to resubmit this recipe for review?')) {
            return;
        }
        isResubmitInProgress = true;
        resubmitBtn.classList.add('disabled');
        const originalText = resubmitBtn.innerHTML;
        resubmitBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i><span>Submitting...</span>';
        fetch('/Recipes/Resubmit', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]')?.value
            },
            body: JSON.stringify({
                recipeId: recipeId
            })
        })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    showDeclineToast('Recipe resubmitted successfully! It will be reviewed again.', 'success');
                    setTimeout(() => {
                        const modal = bootstrap.Modal.getInstance(document.getElementById('recipeDeclineModal'));
                        if (modal) modal.hide();
                        if (data.redirectUrl) {
                            window.location.href = data.redirectUrl;
                        } else {
                            setTimeout(() => window.location.reload(), 1000);
                        }
                    }, 1500);
                } else {
                    showDeclineToast(data.message || 'Failed to resubmit recipe', 'error');
                    resubmitBtn.classList.remove('disabled');
                }
            })
            .catch(error => {
                console.error('Error:', error);
                showDeclineToast('An error occurred while resubmitting the recipe', 'error');
                resubmitBtn.classList.remove('disabled');
            })
            .finally(() => {
                isResubmitInProgress = false;
                resubmitBtn.innerHTML = originalText;
            });
    }
    function showDeclineToast(message, type = 'success') {
        const existingToast = document.querySelector('.decline-toast');
        if (existingToast) {
            existingToast.remove();
        }
        const toast = document.createElement('div');
        toast.className = `decline-toast ${type}`;
        toast.textContent = message;
        document.body.appendChild(toast);
        setTimeout(() => toast.classList.add('show'), 100);
        setTimeout(() => {
            toast.classList.remove('show');
            setTimeout(() => toast.remove(), 300);
        }, 4000);
    }
    document.addEventListener('DOMContentLoaded', function () {
        const urlParams = new URLSearchParams(window.location.search);
        if (urlParams.get('edited') === 'true') {
            const resubmitBtn = document.querySelector('.resubmit-btn');
            if (resubmitBtn) {
                resubmitBtn.classList.remove('disabled');
                resubmitBtn.removeAttribute('disabled');
                resubmitBtn.title = 'Resubmit for Review';
                const hint = document.querySelector('.resubmit-hint');
                if (hint) {
                    hint.style.display = 'none';
                }
                showDeclineToast('Recipe updated! You can now resubmit it for review.', 'success');
            }
        }
    });
    document.addEventListener
</script>