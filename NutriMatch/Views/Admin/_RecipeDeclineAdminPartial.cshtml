@model NutriMatch.Models.Recipe
<div class="modal fade" id="recipeDeclineModal" tabindex="-1" aria-labelledby="recipeDeclineModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header bg-danger text-white">
                <h5 class="modal-title" id="recipeDeclineModalLabel">
                    <i class="fas fa-times-circle me-2"></i>
                    Decline Recipe
                </h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div class="recipe-info-section mb-4">
                    <div class="row">
                        <div class="col-3">
                            <img src="@Model.ImageUrl" alt="@Model.Title" class="img-fluid rounded shadow-sm">
                        </div>
                        <div class="col-9">
                            <h6 class="fw-bold mb-2">@Model.Title</h6>
                            <p class="text-muted mb-1">
                                <i class="fas fa-user me-1"></i>
                                By @Model.User.UserName
                            </p>
                            <p class="text-muted mb-0">
                                <i class="fas fa-calendar me-1"></i>
                                Submitted @Model.CreatedAt.ToString("MMM dd, yyyy")
                            </p>
                        </div>
                    </div>
                </div>
                <hr>
                <form id="declineForm">
                    <input type="hidden" id="declineRecipeId" value="@Model.Id">
                    <div class="mb-3">
                        <label for="declineReason" class="form-label fw-bold text-danger">
                            <i class="fas fa-exclamation-triangle me-1"></i>
                            Reason for Decline <span class="text-danger">*</span>
                        </label>
                        <select class="form-select" id="declineReason" required>
                            <option value="">Please select a reason...</option>
                            <option value="inappropriate_content">Inappropriate Content</option>
                            <option value="incomplete_recipe">Incomplete Recipe Information</option>
                            <option value="poor_quality_image">Poor Quality Image</option>
                            <option value="incorrect_nutrition">Incorrect Nutrition Information</option>
                            <option value="duplicate_recipe">Duplicate Recipe</option>
                            <option value="unsafe_instructions">Unsafe Cooking Instructions</option>
                            <option value="invalid_ingredient">Invalid Ingredient</option>
                            <option value="spam_content">Spam Content</option>
                            <option value="other">Other (Please specify in notes)</option>
                        </select>
                        <div class="invalid-feedback">
                            Please select a reason for declining this recipe.
                        </div>
                    </div>
                    <div class="mb-3">
                        <label for="declineNotes" class="form-label fw-bold">
                            <i class="fas fa-sticky-note me-1"></i>
                            Additional Notes <span class="text-muted">(Optional)</span>
                        </label>
                        <textarea 
                            class="form-control" 
                            id="declineNotes" 
                            rows="4" 
                            placeholder="Provide additional details about why this recipe is being declined. This information will help the user understand the decision and improve future submissions."
                            maxlength="500"></textarea>
                        <div class="form-text">
                            <span id="notesCounter">0</span>/500 characters
                        </div>
                    </div>
                    <div class="alert alert-warning d-flex align-items-center" role="alert">
                        <i class="fas fa-info-circle me-2"></i>
                        <div>
                            <strong>Note:</strong> Once declined, the recipe will be removed from the pending list and the user will be notified of the decision.
                        </div>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-outline-secondary" data-bs-dismiss="modal">
                    <i class="fas fa-arrow-left me-1"></i>
                    Cancel
                </button>
                <button type="button" class="btn btn-danger" id="confirmDeclineBtn" disabled>
                    <i class="fas fa-times me-1"></i>
                    Decline Recipe
                </button>
            </div>
        </div>
    </div>
</div>
<style>
    .recipe-info-section {
        background: #f8f9fa;
        padding: 1rem;
        border-radius: 8px;
        border: 1px solid #e9ecef;
    }
    .recipe-info-section img {
        width: 100%;
        height: 60px;
        object-fit: cover;
    }
    .modal-header.bg-danger {
        border-bottom: 1px solid rgba(255, 255, 255, 0.2);
    }
    .form-label.fw-bold {
        color: #495057;
    }
    .form-label .text-danger {
        font-weight: normal;
    }
    .alert-warning {
        background-color: #fff3cd;
        border-color: #ffeaa7;
        color: #856404;
    }
    #declineNotes:focus {
        border-color: #dc3545;
        box-shadow: 0 0 0 0.2rem rgba(220, 53, 69, 0.25);
    }
    .form-select:focus {
        border-color: #dc3545;
        box-shadow: 0 0 0 0.2rem rgba(220, 53, 69, 0.25);
    }
</style>
<script>
    document.addEventListener('DOMContentLoaded', function() {
        initializeDeclineModal();
    });
    document.getElementById('recipeDeclineModal').addEventListener('shown.bs.modal', function() {
        initializeDeclineModal();
    });
    function initializeDeclineModal() {
        const declineReasonSelect = document.getElementById('declineReason');
        const declineNotesTextarea = document.getElementById('declineNotes');
        const confirmDeclineBtn = document.getElementById('confirmDeclineBtn');
        const notesCounter = document.getElementById('notesCounter');
        if (!declineReasonSelect || !confirmDeclineBtn) {
            console.error('Required elements not found');
            return;
        }
        const newDeclineReasonSelect = declineReasonSelect.cloneNode(true);
        declineReasonSelect.parentNode.replaceChild(newDeclineReasonSelect, declineReasonSelect);
        newDeclineReasonSelect.addEventListener('change', function() {
            const confirmBtn = document.getElementById('confirmDeclineBtn');
            if (confirmBtn) {
                confirmBtn.disabled = !this.value;
                console.log('Reason selected:', this.value, 'Button disabled:', confirmBtn.disabled);
            }
            if (this.value) {
                this.classList.remove('is-invalid');
            }
        });
        newDeclineReasonSelect.addEventListener('input', function() {
            const confirmBtn = document.getElementById('confirmDeclineBtn');
            if (confirmBtn) {
                confirmBtn.disabled = !this.value;
            }
        });
        if (declineNotesTextarea && notesCounter) {
            declineNotesTextarea.addEventListener('input', function() {
                const currentLength = this.value.length;
                notesCounter.textContent = currentLength;
                if (currentLength > 400) {
                    notesCounter.style.color = '#dc3545';
                } else if (currentLength > 300) {
                    notesCounter.style.color = '#ffc107';
                } else {
                    notesCounter.style.color = '#6c757d';
                }
            });
        }
        confirmDeclineBtn.addEventListener('click', function() {
            const recipeId = document.getElementById('declineRecipeId').value;
            const reasonSelect = document.getElementById('declineReason');
            const reason = reasonSelect.value;
            const notes = document.getElementById('declineNotes').value.trim();
            if (!reason) {
                reasonSelect.classList.add('is-invalid');
                reasonSelect.focus();
                return;
            }
            this.disabled = true;
            this.innerHTML = '<span class="spinner-border spinner-border-sm me-1" role="status"></span>Processing...';
            processRecipeDecline(recipeId, reason, notes);
        });
    }
    function processRecipeDecline(recipeId, reason, notes) {
        const tokenElement = document.querySelector('input[name="__RequestVerificationToken"]');
        const token = tokenElement ? tokenElement.value : '';
        fetch('/Admin/DeclineRecipe', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'X-Requested-With': 'XMLHttpRequest',
                'RequestVerificationToken': token
            },
            body: JSON.stringify({
                recipeId: parseInt(recipeId),
                reason: reason,
                notes: notes || ''
            })
        })
        .then(response => {
            console.log('Response status:', response.status);
            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }
            const contentType = response.headers.get('content-type');
            if (!contentType || !contentType.includes('application/json')) {
                return response.text().then(text => {
                    console.error('Non-JSON response:', text);
                    throw new Error('Server returned non-JSON response');
                });
            }
            return response.json();
        })
        .then(data => {
            if (data && data.success) {
                const modal = bootstrap.Modal.getInstance(document.getElementById('recipeDeclineModal'));
                modal.hide();
                showSuccess('Recipe declined successfully!');
                removeRecipeCard(recipeId);
            } else {
                const errorMessage = data && data.message ? data.message : 'Failed to decline recipe';
                showError(errorMessage);
                resetDeclineButton();
            }
        })
        .catch(error => {
            console.error('Error details:', error);
            let errorMessage = 'An error occurred while declining the recipe';
            if (error.message.includes('HTTP error! status: 500')) {
                errorMessage = 'Server error occurred. Please check the server logs and try again.';
            } else if (error.message.includes('non-JSON response')) {
                errorMessage = 'Server returned an unexpected response format.';
            }
            showError(errorMessage);
            resetDeclineButton();
        });
    }
    function resetDeclineButton() {
        const confirmBtn = document.getElementById('confirmDeclineBtn');
        const reasonSelect = document.getElementById('declineReason');
        if (confirmBtn && reasonSelect) {
            const reason = reasonSelect.value;
            confirmBtn.disabled = !reason;
            confirmBtn.innerHTML = '<i class="fas fa-times me-1"></i>Decline Recipe';
        }
    }
    document.getElementById('recipeDeclineModal').addEventListener('hidden.bs.modal', function() {
        const form = document.getElementById('declineForm');
        if (form) {
            form.reset();
        }
        const confirmBtn = document.getElementById('confirmDeclineBtn');
        if (confirmBtn) {
            confirmBtn.disabled = true;
            confirmBtn.innerHTML = '<i class="fas fa-times me-1"></i>Decline Recipe';
        }
        const reasonSelect = document.getElementById('declineReason');
        if (reasonSelect) {
            reasonSelect.classList.remove('is-invalid');
        }
        const notesCounter = document.getElementById('notesCounter');
        if (notesCounter) {
            notesCounter.textContent = '0';
            notesCounter.style.color = '#6c757d';
        }
    });
</script>