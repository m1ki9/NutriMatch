@model List<NutriMatch.Models.Recipe>
@{
    Layout = "_Layout";
}
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link href="~/css/RecipeIndex.css" rel="stylesheet">
    <title>NutriMatch - Admin Panel</title>
    <style>
        .admin-header {
            background: linear-gradient(135deg, #f8fafc 0%, #e2e8f0 100%);
            border-radius: 12px;
            padding: 2rem;
            border: 1px solid #e2e8f0;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
        }
        .admin-title {
            font-size: 2rem;
            font-weight: 700;
            color: #1f2937;
            margin: 0;
        }
        .admin-subtitle {
            font-size: 1.1rem;
            margin: 0;
            margin-top: 0.5rem;
        }
        .admin-stats .badge {
            padding: 0.5rem 1rem;
            font-weight: 600;
        }
        .bulk-actions-section {
            background: #fff;
            border: 2px dashed #d1d5db;
            border-radius: 8px;
            padding: 1.5rem;
            transition: all 0.3s ease;
        }
        .bulk-actions-section:hover {
            border-color: var(--nutri-green);
            background: #f0fdf4;
        }
        .admin-recipe-card {
            position: relative;
            border: 2px solid #e5e7eb;
            transition: all 0.3s ease;
        }
        .admin-recipe-card:hover {
            border-color: var(--nutri-green);
            transform: translateY(-2px);
        }
        .admin-recipe-card.selected {
            border-color: #3b82f6;
            background: #eff6ff;
        }
        .recipe-select {
            position: absolute;
            top: 10px;
            left: 10px;
            z-index: 10;
        }
        .recipe-checkbox {
            width: 20px;
            height: 20px;
            cursor: pointer;
            accent-color: #3b82f6;
        }
        .recipe-status-badge {
            position: absolute;
            top: 10px;
            right: 10px;
            z-index: 10;
        }
        .recipe-status-badge .badge {
            font-size: 0.75rem;
            padding: 0.25rem 0.5rem;
        }
        .admin-actions-buttons {
            border-top: 1px solid #e5e7eb;
            padding-top: 1rem;
        }
        .admin-actions-buttons .btn {
            font-size: 0.875rem;
            padding: 0.375rem 0.75rem;
            font-weight: 500;
        }
        .decline-reason-section {
            background: #fef2f2;
            border: 1px solid #fecaca;
            border-radius: 6px;
            padding: 1rem;
            animation: slideDown 0.3s ease;
        }
        @@keyframes slideDown {
            from {
                opacity: 0;
                transform: translateY(-10px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }
        .empty-state {
            background: #f9fafb;
            border: 2px dashed #d1d5db;
            border-radius: 12px;
            margin: 2rem 0;
        }
        .loading-overlay {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.7);
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
            z-index: 9999;
            color: white;
        }
        .loading-overlay .spinner-border {
            width: 3rem;
            height: 3rem;
        }
        .recipe-image {
            cursor: pointer;
            transition: opacity 0.3s ease;
        }
        .recipe-image:hover {
            opacity: 0.9;
        }
        .recipe-title {
            cursor: pointer;
            transition: color 0.3s ease;
        }
        .recipe-title:hover {
            color: var(--nutri-green);
        }
        .btn:disabled {
            opacity: 0.6;
            cursor: not-allowed;
        }
        .btn-success:hover:not(:disabled) {
            transform: translateY(-1px);
            box-shadow: 0 4px 8px rgba(34, 197, 94, 0.3);
        }
        .btn-danger:hover:not(:disabled) {
            transform: translateY(-1px);
            box-shadow: 0 4px 8px rgba(239, 68, 68, 0.3);
        }
        @@media (max-width: 768px) {
            .admin-header {
                text-align: center;
                padding: 1.5rem;
            }
            .admin-title {
                font-size: 1.5rem;
            }
            .bulk-actions-section {
                padding: 1rem;
            }
            .admin-actions-buttons {
                display: flex;
                flex-direction: column;
                gap: 0.5rem;
            }
            .admin-actions-buttons .btn {
                width: 100%;
            }
        }
        .recipe-card.removing {
            animation: fadeOut 0.5s ease forwards;
        }
        @@keyframes fadeOut {
            from {
                opacity: 1;
                transform: scale(1);
            }
            to {
                opacity: 0;
                transform: scale(0.9);
            }
        }
        .recipe-card.approved {
            border-color: #10b981;
            background: #f0fdf4;
        }
        .recipe-card.declined {
            border-color: #ef4444;
            background: #fef2f2;
        }
        .form-select-sm, .form-control-sm {
            font-size: 0.875rem;
        }
        .decline-reason-section .form-label {
            color: #991b1b;
            margin-bottom: 0.5rem;
        }
        .search-container {
            background: white;
            border-radius: 8px;
            padding: 1.5rem;
            border: 1px solid #e5e7eb;
            margin-bottom: 2rem;
            box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
        }
        .admin-recipe-card .recipe-meta {
            margin-bottom: 1rem;
        }
        .admin-recipe-card .recipe-meta span {
            font-size: 0.875rem;
            color: #6b7280;
            margin-right: 1rem;
        }
    </style>
</head>
<body>
    @Html.AntiForgeryToken()
    <div class="container mt-4">
        <div class="admin-header mb-4">
            <div class="row align-items-center">
                <div class="col-md-8">
                    <h2 class="admin-title">
                        <i class="fas fa-shield-alt me-2" style="color: var(--nutri-green);"></i>
                        Recipe Approval Panel
                    </h2>
                    <p class="admin-subtitle text-muted">Review and manage pending recipe submissions</p>
                </div>
                <div class="col-md-4 text-end">
                    <div class="admin-stats">
                        <span class="badge bg-warning fs-6 me-2">
                            <i class="fas fa-clock me-1"></i>
                            @Model.Count Pending
                        </span>
                    </div>
                </div>
            </div>
        </div>
        <div class="search-container">
            <div class="row align-items-center">
                <div class="col-md-8">
                    <input type="text" class="form-control search-input" placeholder="Search pending recipes..." id="searchInput">
                </div>
                <div class="col-md-4">
                    <select class="form-select" id="sortFilter">
                        <option value="newest">Newest First</option>
                        <option value="oldest">Oldest First</option>
                        <option value="author">By Author</option>
                        <option value="calories">By Calories</option>
                    </select>
                </div>
            </div>
        </div>
        <div class="bulk-actions-section mb-4">
            <div class="row align-items-center">
                <div class="col-md-6">
                    <div class="form-check">
                        <input class="form-check-input" type="checkbox" id="selectAll">
                        <label class="form-check-label fw-bold" for="selectAll">
                            Select All Recipes
                        </label>
                    </div>
                </div>
                <div class="col-md-6 text-end">
                    <button class="btn btn-success me-2" id="bulkApprove" disabled>
                        <i class="fas fa-check me-1"></i>Bulk Approve
                    </button>
                    <button class="btn btn-danger" id="bulkDecline" disabled>
                        <i class="fas fa-times me-1"></i>Bulk Decline
                    </button>
                </div>
            </div>
        </div>
        <div class="d-flex justify-content-between align-items-center mb-4">
            <div class="results-count">
                <i class="fas fa-utensils me-2"></i>
                Showing <strong id="displayCount">@Model.Count</strong> pending recipes
            </div>
            <div class="admin-actions">
                <button class="btn btn-outline-primary" onclick="refreshPendingRecipes()">
                    <i class="fas fa-sync-alt me-1"></i>Refresh
                </button>
            </div>
        </div>
        <div class="recipe-grid" id="recipeGrid">
            @foreach(var recipe in Model)
            {
                <div class="recipe-card admin-recipe-card" data-recipe-id="@recipe.Id" data-calories="@recipe.Calories" data-protein="@recipe.Protein" data-carbs="@recipe.Carbs" data-fat="@recipe.Fat">
                    <div class="recipe-select">
                        <input type="checkbox" class="recipe-checkbox" data-recipe-id="@recipe.Id">
                    </div>
                    <div class="recipe-status-badge">
                        <span class="badge bg-warning">
                            <i class="fas fa-clock me-1"></i>Pending
                        </span>
                    </div>
                    <img src="@recipe.ImageUrl" alt="@recipe.Title" class="recipe-image" onclick="showRecipeDetails(@recipe.Id, true)">
                    <div class="recipe-content">
                        <h3 class="recipe-title" onclick="showRecipeDetails(@recipe.Id, true)">@recipe.Title</h3>
                        <div class="recipe-meta">
                            <span><i class="fas fa-user"></i>@recipe.User.UserName</span>
                            <span><i class="fas fa-calendar"></i>@recipe.CreatedAt.ToString("MMM dd, yyyy")</span>
                        </div>
                        <div class="recipe-macros">
                            <div class="macro-item">
                                <div class="macro-value">@recipe.Calories</div>
                                <div class="macro-label">Cal</div>
                            </div>
                            <div class="macro-item">
                                <div class="macro-value">@recipe.Protein</div>
                                <div class="macro-label">Protein</div>
                            </div>
                            <div class="macro-item">
                                <div class="macro-value">@recipe.Carbs</div>
                                <div class="macro-label">Carbs</div>
                            </div>
                            <div class="macro-item">
                                <div class="macro-value">@recipe.Fat</div>
                                <div class="macro-label">Fats</div>
                            </div>
                        </div>
                        <div class="admin-actions-buttons mt-3">
                            <button class="btn btn-success btn-sm me-2" onclick="approveRecipe(@recipe.Id, this)">
                                <i class="fas fa-check me-1"></i>Approve
                            </button>
                            <button class="btn btn-danger btn-sm me-2" onclick="declineRecipe(@recipe.Id, this)">
                                <i class="fas fa-times me-1"></i>Decline
                            </button>
                            <button class="btn btn-outline-primary btn-sm" onclick="showRecipeDetails(@recipe.Id, true)">
                                <i class="fas fa-eye me-1"></i>Review
                            </button>
                        </div>
                        <div class="decline-reason-section mt-3" style="display: none;" id="declineReason_@recipe.Id">
                            <label class="form-label small fw-bold">Reason for decline:</label>
                            <select class="form-select form-select-sm mb-2" id="declineSelect_@recipe.Id">
                                <option value="">Select a reason...</option>
                                <option value="inappropriate_content">Inappropriate Content</option>
                                <option value="incomplete_recipe">Incomplete Recipe</option>
                                <option value="poor_quality_image">Poor Quality Image</option>
                                <option value="incorrect_nutrition">Incorrect Nutrition Info</option>
                                <option value="duplicate_recipe">Duplicate Recipe</option>
                                <option value="other">Other</option>
                            </select>
                            <textarea class="form-control form-control-sm mb-2" placeholder="Additional notes (optional)" id="declineNotes_@recipe.Id" rows="2"></textarea>
                            <div class="text-end">
                                <button class="btn btn-outline-secondary btn-sm me-1" onclick="cancelDecline(@recipe.Id)">Cancel</button>
                                <button class="btn btn-danger btn-sm" onclick="confirmDecline(@recipe.Id)">
                                    <i class="fas fa-times me-1"></i>Confirm Decline
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>
        @if(!Model.Any())
        {
            <div class="empty-state text-center py-5">
                <i class="fas fa-check-circle text-success" style="font-size: 4rem;"></i>
                <h3 class="mt-3">All Caught Up!</h3>
                <p class="text-muted">There are no pending recipes to review at this time.</p>
                <button class="btn btn-primary" onclick="window.location.reload()">
                    <i class="fas fa-sync-alt me-1"></i>Check Again
                </button>
            </div>
        }
    </div>
    <div id="modalWindow"></div>
    <div id="loadingOverlay" class="loading-overlay" style="display: none;">
        <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Processing...</span>
        </div>
        <p class="mt-3">Processing request...</p>
    </div>
    <script src="~/js/RecipeIndex.js"></script>
    <script>
    document.addEventListener('DOMContentLoaded', function() {
        initializeAdminPanel();
    });
    function initializeAdminPanel() {
        setupBulkActions();
        setupSearchFunctionality();
        setupSortingFunctionality();
        updateDisplayCount();
    }
    function setupBulkActions() {
        const selectAllCheckbox = document.getElementById('selectAll');
        const recipeCheckboxes = document.querySelectorAll('.recipe-checkbox');
        const bulkApproveBtn = document.getElementById('bulkApprove');
        const bulkDeclineBtn = document.getElementById('bulkDecline');
        selectAllCheckbox.addEventListener('change', function() {
            recipeCheckboxes.forEach(checkbox => {
                checkbox.checked = this.checked;
                toggleRecipeSelection(checkbox);
            });
            updateBulkActionButtons();
        });
        recipeCheckboxes.forEach(checkbox => {
            checkbox.addEventListener('change', function() {
                toggleRecipeSelection(this);
                updateBulkActionButtons();
                updateSelectAllState();
            });
        });
        bulkApproveBtn.addEventListener('click', handleBulkApprove);
        bulkDeclineBtn.addEventListener('click', handleBulkDecline);
    }
    function toggleRecipeSelection(checkbox) {
        const recipeCard = checkbox.closest('.recipe-card');
        if (checkbox.checked) {
            recipeCard.classList.add('selected');
        } else {
            recipeCard.classList.remove('selected');
        }
    }
    function updateBulkActionButtons() {
        const selectedCheckboxes = document.querySelectorAll('.recipe-checkbox:checked');
        const bulkApproveBtn = document.getElementById('bulkApprove');
        const bulkDeclineBtn = document.getElementById('bulkDecline');
        const hasSelections = selectedCheckboxes.length > 0;
        bulkApproveBtn.disabled = !hasSelections;
        bulkDeclineBtn.disabled = !hasSelections;
    }
    function updateSelectAllState() {
        const selectAllCheckbox = document.getElementById('selectAll');
        const recipeCheckboxes = document.querySelectorAll('.recipe-checkbox');
        const checkedBoxes = document.querySelectorAll('.recipe-checkbox:checked');
        if (checkedBoxes.length === 0) {
            selectAllCheckbox.indeterminate = false;
            selectAllCheckbox.checked = false;
        } else if (checkedBoxes.length === recipeCheckboxes.length) {
            selectAllCheckbox.indeterminate = false;
            selectAllCheckbox.checked = true;
        } else {
            selectAllCheckbox.indeterminate = true;
        }
    }
    function approveRecipe(recipeId, button) {
        if (!confirm('Are you sure you want to approve this recipe?')) {
            return;
        }
        showLoadingOverlay();
        const token = document.querySelector('input[name="__RequestVerificationToken"]').value;
        fetch('/Admin/ApproveRecipe', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'RequestVerificationToken': token
            },
            body: JSON.stringify({ recipeId: recipeId })
        })
        .then(response => response.json())
        .then(data => {
            hideLoadingOverlay();
            if (data.success) {
                showSuccess('Recipe approved successfully!');
                removeRecipeCard(recipeId);
            } else {
                showError(data.message || 'Failed to approve recipe');
            }
        })
        .catch(error => {
            hideLoadingOverlay();
            console.error('Error:', error);
            showError('An error occurred while approving the recipe');
        });
    }
    function declineRecipe(recipeId, button) {
        const declineSection = document.getElementById(`declineReason_${recipeId}`);
        const recipeCard = button.closest('.recipe-card');
        declineSection.style.display = 'block';
        button.style.display = 'none';
        const actionButtons = recipeCard.querySelectorAll('.admin-actions-buttons .btn:not(.btn-outline-secondary)');
        actionButtons.forEach(btn => {
            if (btn !== button && !btn.classList.contains('btn-outline-secondary')) {
                btn.style.display = 'none';
            }
        });
    }
    function cancelDecline(recipeId) {
        const declineSection = document.getElementById(`declineReason_${recipeId}`);
        const recipeCard = declineSection.closest('.recipe-card');
        declineSection.style.display = 'none';
        const actionButtons = recipeCard.querySelectorAll('.admin-actions-buttons .btn');
        actionButtons.forEach(btn => {
            btn.style.display = '';
        });
        document.getElementById(`declineSelect_${recipeId}`).value = '';
        document.getElementById(`declineNotes_${recipeId}`).value = '';
    }
    function confirmDecline(recipeId) {
        const reason = document.getElementById(`declineSelect_${recipeId}`).value;
        const notes = document.getElementById(`declineNotes_${recipeId}`).value;
        if (!reason) {
            showError('Please select a reason for declining the recipe');
            return;
        }
        showLoadingOverlay();
        const token = document.querySelector('input[name="__RequestVerificationToken"]').value;
        fetch('/Admin/DeclineRecipe', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'RequestVerificationToken': token
            },
            body: JSON.stringify({
                recipeId: recipeId,
            })
        })
        .then(response => response.json())
        .then(data => {
            hideLoadingOverlay();
            if (data.success) {
                showSuccess('Recipe declined successfully!');
                removeRecipeCard(recipeId);
            } else {
                showError(data.message || 'Failed to decline recipe');
            }
        })
        .catch(error => {
            hideLoadingOverlay();
            console.error('Error:', error);
            showError('An error occurred while declining the recipe');
        });
    }
    function handleBulkApprove() {
        const selectedRecipes = getSelectedRecipeIds();
        if (selectedRecipes.length === 0) {
            showError('No recipes selected');
            return;
        }
        if (!confirm(`Are you sure you want to approve ${selectedRecipes.length} recipe(s)?`)) {
            return;
        }
        showLoadingOverlay();
        const token = document.querySelector('input[name="__RequestVerificationToken"]').value;
        fetch('/Admin/BulkApproveRecipes', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'RequestVerificationToken': token
            },
            body: JSON.stringify({ recipeIds: selectedRecipes })
        })
        .then(response => response.json())
        .then(data => {
            hideLoadingOverlay();
            if (data.success) {
                showSuccess(`${data.approvedCount} recipe(s) approved successfully!`);
                selectedRecipes.forEach(recipeId => removeRecipeCard(recipeId));
            } else {
                showError(data.message || 'Failed to approve recipes');
            }
        })
        .catch(error => {
            hideLoadingOverlay();
            console.error('Error:', error);
            showError('An error occurred during bulk approval');
        });
    }
    function handleBulkDecline() {
        const selectedRecipes = getSelectedRecipeIds();
        if (selectedRecipes.length === 0) {
            showError('No recipes selected');
            return;
        }
        showBulkDeclineModal(selectedRecipes);
    }
    function getSelectedRecipeIds() {
        const selectedCheckboxes = document.querySelectorAll('.recipe-checkbox:checked');
        return Array.from(selectedCheckboxes).map(checkbox => parseInt(checkbox.dataset.recipeId));
    }
    function setupSearchFunctionality() {
        const searchInput = document.getElementById('searchInput');
        let searchTimeout;
        searchInput.addEventListener('input', function() {
            clearTimeout(searchTimeout);
            searchTimeout = setTimeout(() => {
                filterRecipes();
            }, 300);
        });
    }
    function filterRecipes() {
        const searchTerm = document.getElementById('searchInput').value.toLowerCase();
        const recipeCards = document.querySelectorAll('.recipe-card');
        let visibleCount = 0;
        recipeCards.forEach(card => {
            const title = card.querySelector('.recipe-title').textContent.toLowerCase();
            const author = card.querySelector('.recipe-meta span').textContent.toLowerCase();
            const isVisible = title.includes(searchTerm) || author.includes(searchTerm);
            card.style.display = isVisible ? 'block' : 'none';
            if (isVisible) visibleCount++;
        });
        updateDisplayCount(visibleCount);
    }
    function setupSortingFunctionality() {
        const sortFilter = document.getElementById('sortFilter');
        sortFilter.addEventListener('change', function() {
            sortRecipes(this.value);
        });
    }
    function sortRecipes(sortBy) {
        const recipeGrid = document.getElementById('recipeGrid');
        const recipeCards = Array.from(recipeGrid.querySelectorAll('.recipe-card'));
        recipeCards.sort((a, b) => {
            switch (sortBy) {
                case 'newest':
                    return parseInt(b.dataset.recipeId) - parseInt(a.dataset.recipeId);
                case 'oldest':
                    return parseInt(a.dataset.recipeId) - parseInt(b.dataset.recipeId);
                case 'author':
                    const authorA = a.querySelector('.recipe-meta span').textContent.toLowerCase();
                    const authorB = b.querySelector('.recipe-meta span').textContent.toLowerCase();
                    return authorA.localeCompare(authorB);
                case 'calories':
                    return parseInt(a.dataset.calories) - parseInt(b.dataset.calories);
                default:
                    return 0;
            }
        });
        recipeCards.forEach(card => recipeGrid.appendChild(card));
    }
    function removeRecipeCard(recipeId) {
        const recipeCard = document.querySelector(`[data-recipe-id="${recipeId}"]`);
        if (recipeCard) {
            recipeCard.classList.add('removing');
            setTimeout(() => {
                recipeCard.remove();
                updateDisplayCount();
                updateBulkActionButtons();
                updateSelectAllState();
                if (document.querySelectorAll('.recipe-card').length === 0) {
                    location.reload();
                }
            }, 500);
        }
    }
    function updateDisplayCount(count = null) {
        const displayCountElement = document.getElementById('displayCount');
        if (count === null) {
            count = document.querySelectorAll('.recipe-card:not([style*="display: none"])').length;
        }
        displayCountElement.textContent = count;
    }
    function showLoadingOverlay() {
        document.getElementById('loadingOverlay').style.display = 'flex';
    }
    function hideLoadingOverlay() {
        document.getElementById('loadingOverlay').style.display = 'none';
    }
    function showSuccess(message) {
        alert(message);
    }
    function showError(message) {
        alert(message);
    }
    function refreshPendingRecipes() {
        location.reload();
    }
    function showRecipeDetails(recipeId, isAdmin = false) {
            fetch(`/Recipes/Details/${recipeId}`)
        .then(response => {
            if (!response.ok) {
                throw new Error('Network response was not ok');
            }
            return response.text();
        })
        .then(html => {
            const modalContainer = document.getElementById('modalWindow');
            modalContainer.innerHTML = html;
            const scripts = modalContainer.querySelectorAll("script");
            scripts.forEach(script => {
                const newScript = document.createElement("script");
                if (script.src) {
                    newScript.src = script.src;
                } else {
                    newScript.textContent = script.textContent;
                }
                document.body.appendChild(newScript);
                document.body.removeChild(newScript);
            });
            const modalElement = modalContainer.querySelector('.modal');
            if (modalElement) {
                const modal = new bootstrap.Modal(modalElement);
                modal.show();
                modalElement.addEventListener('hidden.bs.modal', function () {
                    modalContainer.innerHTML = '';
                    clickedCard.classList.remove('loading');
                }); 
                modalElement.addEventListener('shown.bs.modal', function () {
                    clickedCard.classList.remove('loading');
                });
            } else {    
                clickedCard.classList.remove('loading');
            }
        })
        .catch(err => {
            console.error("Failed to fetch recipe details", err);
            alert("Failed to load recipe details. Please try again.");
            clickedCard.classList.remove('loading');
        });
            addAdminControlsToModal(recipeId);
    }
    function addAdminControlsToModal(recipeId) {
        const modalFooter = document.querySelector('#modalWindow .modal-footer');
        if (modalFooter) {
            const adminControls = `
                <div class="admin-modal-controls me-auto">
                    <button class="btn btn-success me-2" onclick="approveRecipe(${recipeId}, this); closeModal();">
                        <i class="fas fa-check me-1"></i>Approve Recipe
                    </button>
                    <button class="btn btn-danger" onclick="declineRecipeFromModal(${recipeId})">
                        <i class="fas fa-times me-1"></i>Decline Recipe
                    </button>
                </div>
            `;
            modalFooter.insertAdjacentHTML('afterbegin', adminControls);
        }
    }
    function declineRecipeFromModal(recipeId) {
        const modalBody = document.querySelector('#modalWindow .modal-body');
        const declineForm = `
            <div class="decline-reason-modal mt-4 p-3" style="background: #fef2f2; border: 1px solid #fecaca; border-radius: 8px;">
                <h6 class="text-danger mb-3">
                    <i class="fas fa-exclamation-triangle me-2"></i>
                    Decline Recipe
                </h6>
                <div class="mb-3">
                    <label class="form-label">Reason for decline:</label>
                    <select class="form-select" id="modalDeclineSelect">
                        <option value="">Select a reason...</option>
                        <option value="inappropriate_content">Inappropriate Content</option>
                        <option value="incomplete_recipe">Incomplete Recipe</option>
                        <option value="poor_quality_image">Poor Quality Image</option>
                        <option value="incorrect_nutrition">Incorrect Nutrition Info</option>
                        <option value="duplicate_recipe">Duplicate Recipe</option>
                        <option value="other">Other</option>
                    </select>
                </div>
                <div class="mb-3">
                    <label class="form-label">Additional notes (optional):</label>
                    <textarea class="form-control" id="modalDeclineNotes" rows="3" placeholder="Provide additional details about why this recipe is being declined..."></textarea>
                </div>
                <div class="text-end">
                    <button class="btn btn-outline-secondary me-2" onclick="cancelModalDecline()">Cancel</button>
                    <button class="btn btn-danger" onclick="confirmModalDecline(${recipeId})">
                        <i class="fas fa-times me-1"></i>Confirm Decline
                    </button>
                </div>
            </div>
        `;
        modalBody.insertAdjacentHTML('beforeend', declineForm);
        const adminControls = document.querySelector('.admin-modal-controls');
        if (adminControls) {
            adminControls.style.display = 'none';
        }
    }
    function cancelModalDecline() {
        const declineForm = document.querySelector('.decline-reason-modal');
        const adminControls = document.querySelector('.admin-modal-controls');
        if (declineForm) {
            declineForm.remove();
        }
        if (adminControls) {
            adminControls.style.display = 'block';
        }
    }
    function confirmModalDecline(recipeId) {
        const reason = document.getElementById('modalDeclineSelect').value;
        const notes = document.getElementById('modalDeclineNotes').value;
        if (!reason) {
            showError('Please select a reason for declining the recipe');
            return;
        }
        showLoadingOverlay();
        const token = document.querySelector('input[name="__RequestVerificationToken"]').value;
        fetch('/Admin/DeclineRecipe', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'RequestVerificationToken': token
            },
            body: JSON.stringify({
                recipeId: recipeId,
            })
        })
        .then(response => response.json())
        .then(data => {
            hideLoadingOverlay();
            if (data.success) {
                showSuccess('Recipe declined successfully!');
                closeModal();
                removeRecipeCard(recipeId);
            } else {
                showError(data.message || 'Failed to decline recipe');
            }
        })
        .catch(error => {
            hideLoadingOverlay();
            console.error('Error:', error);
            showError('An error occurred while declining the recipe');
        });
    }
    function closeModal() {
        const modal = document.getElementById('modalWindow');
        modal.innerHTML = '';
    }
    function showBulkDeclineModal(recipeIds) {
        const modalHtml = `
            <div class="modal fade show" style="display: block;" tabindex="-1">
                <div class="modal-dialog modal-lg">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h5 class="modal-title text-danger">
                                <i class="fas fa-exclamation-triangle me-2"></i>
                                Bulk Decline Recipes
                            </h5>
                            <button type="button" class="btn-close" onclick="closeBulkDeclineModal()"></button>
                        </div>
                        <div class="modal-body">
                            <div class="alert alert-warning">
                                <i class="fas fa-info-circle me-2"></i>
                                You are about to decline <strong>${recipeIds.length}</strong> recipe(s). This action cannot be undone.
                            </div>
                            <div class="mb-3">
                                <label class="form-label fw-bold">Reason for decline:</label>
                                <select class="form-select" id="bulkDeclineSelect" required>
                                    <option value="">Select a reason...</option>
                                    <option value="inappropriate_content">Inappropriate Content</option>
                                    <option value="incomplete_recipe">Incomplete Recipe</option>
                                    <option value="poor_quality_image">Poor Quality Image</option>
                                    <option value="incorrect_nutrition">Incorrect Nutrition Info</option>
                                    <option value="duplicate_recipe">Duplicate Recipe</option>
                                    <option value="other">Other</option>
                                </select>
                            </div>
                            <div class="mb-3">
                                <label class="form-label fw-bold">Additional notes (optional):</label>
                                <textarea class="form-control" id="bulkDeclineNotes" rows="4" placeholder="Provide additional details about why these recipes are being declined..."></textarea>
                            </div>
                        </div>
                        <div class="modal-footer">
                            <button type="button" class="btn btn-outline-secondary" onclick="closeBulkDeclineModal()">Cancel</button>
                            <button type="button" class="btn btn-danger" onclick="confirmBulkDecline([${recipeIds.join(',')}])">
                                <i class="fas fa-times me-1"></i>Decline ${recipeIds.length} Recipe(s)
                            </button>
                        </div>
                    </div>
                </div>
            </div>
            <div class="modal-backdrop fade show"></div>
        `;
        document.getElementById('modalWindow').innerHTML = modalHtml;
    }
    function closeBulkDeclineModal() {
        document.getElementById('modalWindow').innerHTML = '';
    }
    function confirmBulkDecline(recipeIds) {
        const reason = document.getElementById('bulkDeclineSelect').value;
        const notes = document.getElementById('bulkDeclineNotes').value;
        if (!reason) {
            showError('Please select a reason for declining the recipes');
            return;
        }
        showLoadingOverlay();
        closeBulkDeclineModal();
        const token = document.querySelector('input[name="__RequestVerificationToken"]').value;
        fetch('/Admin/BulkDeclineRecipes', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'RequestVerificationToken': token
            },
            body: JSON.stringify({
                recipeIds: recipeIds
            })
        })
        .then(response => response.json())
        .then(data => {
            hideLoadingOverlay();
            if (data.success) {
                showSuccess(`${data.declinedCount} recipe(s) declined successfully!`);
                recipeIds.forEach(recipeId => removeRecipeCard(recipeId));
            } else {
                showError(data.message || 'Failed to decline recipes');
            }
        })
        .catch(error => {
            hideLoadingOverlay();
            console.error('Error:', error);
            showError('An error occurred during bulk decline');
        });
    }
    function createToast(message, type = 'info') {
        const toastContainer = document.getElementById('toast-container') || createToastContainer();
        const toast = document.createElement('div');
        toast.className = `toast align-items-center text-white bg-${type} border-0`;
        toast.setAttribute('role', 'alert');
        toast.setAttribute('aria-live', 'assertive');
        toast.setAttribute('aria-atomic', 'true');
        toast.innerHTML = `
            <div class="d-flex">
                <div class="toast-body">
                    ${message}
                </div>
                <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast"></button>
            </div>
        `;
        toastContainer.appendChild(toast);
        setTimeout(() => {
            if (toast.parentNode) {
                toast.remove();
            }
        }, 5000);
    }
    function createToastContainer() {
        const container = document.createElement('div');
        container.id = 'toast-container';
        container.className = 'toast-container position-fixed top-0 end-0 p-3';
        container.style.zIndex = '1055';
        document.body.appendChild(container);
        return container;
    }
    function showSuccess(message) {
        createToast(message, 'success');
    }
    function showError(message) {
        createToast(message, 'danger');
    }
    document.addEventListener('keydown', function(e) {
        if ((e.ctrlKey || e.metaKey) && e.key === 'a' && e.target.tagName !== 'INPUT' && e.target.tagName !== 'TEXTAREA') {
            e.preventDefault();
            const selectAllCheckbox = document.getElementById('selectAll');
            selectAllCheckbox.checked = !selectAllCheckbox.checked;
            selectAllCheckbox.dispatchEvent(new Event('change'));
        }
        if (e.key === 'Escape') {
            closeModal();
            closeBulkDeclineModal();
        }
    });
    </script>
</body>
</html>